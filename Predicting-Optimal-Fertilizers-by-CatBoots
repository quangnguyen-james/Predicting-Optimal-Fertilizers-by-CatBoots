{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":91717,"databundleVersionId":12184666,"sourceType":"competition"}],"dockerImageVersionId":31041,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/quangjames/s5e6-single-catboots?scriptVersionId=244499894\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-09T09:43:55.464312Z","iopub.execute_input":"2025-06-09T09:43:55.46488Z","iopub.status.idle":"2025-06-09T09:43:55.732645Z","shell.execute_reply.started":"2025-06-09T09:43:55.464848Z","shell.execute_reply":"2025-06-09T09:43:55.732051Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Import Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom IPython.display import display, HTML\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, PowerTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom catboost import CatBoostClassifier, Pool\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom category_encoders import TargetEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-09T09:43:58.217918Z","iopub.execute_input":"2025-06-09T09:43:58.218632Z","iopub.status.idle":"2025-06-09T09:44:00.339186Z","shell.execute_reply.started":"2025-06-09T09:43:58.218609Z","shell.execute_reply":"2025-06-09T09:44:00.338592Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Dataset Understanding","metadata":{}},{"cell_type":"code","source":"#------------- TRAIN DATASET\ntrain_file = '/kaggle/input/playground-series-s5e6/train.csv'\n\ntrain_data = pd.read_csv(train_file)\n\ndisplay(HTML(\"<span style='color: red; font-weight: bold;'>Overview information of Train dataset</span>\"))\nprint(train_data.info())\ndisplay(HTML(\"<span style='color: blue; font-weight: bold;'>10 first samples of Train dataset</span>\"))\nprint(train_data.head(10))\n\n#------------- TEST DATASET\n\ntest_file = '/kaggle/input/playground-series-s5e6/test.csv'\n\ntest_data = pd.read_csv(test_file)\n\ndisplay(HTML(\"<span style='color: red; font-weight: bold;'>Overview information of Test dataset</span>\"))\nprint(test_data.info())\ndisplay(HTML(\"<span style='color: blue; font-weight: bold;'>10 first samples of Test dataset</span>\"))\nprint(test_data.head(10))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-09T09:44:13.351664Z","iopub.execute_input":"2025-06-09T09:44:13.351944Z","iopub.status.idle":"2025-06-09T09:44:14.858262Z","shell.execute_reply.started":"2025-06-09T09:44:13.351921Z","shell.execute_reply":"2025-06-09T09:44:14.857443Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Define global variables","metadata":{}},{"cell_type":"code","source":"id_column = 'id'\ntarget_column = 'Fertilizer Name'\nnumeric_features = [col for col in train_data.select_dtypes(include=['int64', 'float64']).columns if col != target_column and col != id_column]\nprint(numeric_features)\ncategorical_features = [col for col in train_data.select_dtypes(include=['object']).columns if col != target_column and col != id_column]\nprint(categorical_features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-09T09:44:20.112777Z","iopub.execute_input":"2025-06-09T09:44:20.113062Z","iopub.status.idle":"2025-06-09T09:44:20.145939Z","shell.execute_reply.started":"2025-06-09T09:44:20.113042Z","shell.execute_reply":"2025-06-09T09:44:20.145147Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Check target_column unique value and distribution","metadata":{}},{"cell_type":"code","source":"target_counts = train_data[target_column].value_counts()\nprint(target_counts)\n\ntarget_total_count = target_counts.sum()\nprint(\"Total of target_counts:\", target_total_count)\n\n# Tính phần trăm\npercentages = target_counts / target_total_count * 100\n\n# Vẽ biểu đồ cột\nplt.figure(figsize=(10, 6))\nbars = plt.bar(target_counts.index, target_counts.values, color='cornflowerblue')\n\n# Thêm nhãn phần trăm trên mỗi cột\nfor bar, pct in zip(bars, percentages):\n    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2000,\n             f'{pct:.1f}%', ha='center', va='bottom', fontsize=9)\n\n# Cấu hình biểu đồ\nplt.title('Target Distribution', fontsize=14)\nplt.xlabel(f'{target_column}', fontsize=12)\nplt.ylabel('Counts', fontsize=12)\nplt.xticks(rotation=45)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-09T07:07:03.13772Z","iopub.execute_input":"2025-06-09T07:07:03.137994Z","iopub.status.idle":"2025-06-09T07:07:03.53236Z","shell.execute_reply.started":"2025-06-09T07:07:03.137968Z","shell.execute_reply":"2025-06-09T07:07:03.531583Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Data Preprocessing","metadata":{}},{"cell_type":"code","source":"# Read dataset\ntrain_file = '/kaggle/input/playground-series-s5e6/train.csv'\ntest_file = '/kaggle/input/playground-series-s5e6/test.csv'\ntrain_data = pd.read_csv(train_file)\ntest_data = pd.read_csv(test_file)\n\n# Data preparation\ntrain_df = train_data.copy().drop(id_column, axis=1)\ntest_ids = test_data[id_column].copy()\ntest_df = test_data.copy().drop(id_column, axis=1)\n\n# # Add more features\n# def add_features(df):\n#     #df['Temp_Humidity'] = df['Temparature'] / (df['Humidity'] + 1e-5)\n#     df['Sum_Temp_Humidity'] = df['Temparature'] + df['Humidity']\n#     #df['Temp_Moisture'] = df['Temparature'] / (df['Moisture'] + 1e-5)\n#     df['Sum_Temp_Moisture'] = df['Temparature'] + df['Moisture']\n#     #df['Moisture_Humidity'] = df['Moisture'] / (df['Humidity'] + 1e-5)\n#     df['Sum_Temp_Humidity'] = df['Moisture'] + df['Humidity']\n#     df['Total_Moisture_Humidity'] = df['Temparature'] + df['Moisture'] + df['Humidity']\n    \n#     # df['Nitrogen_Potassium'] = df['Nitrogen'] / (df['Potassium'] + 1e-5)\n#     # df['Sum_Nitrogen_Potassium'] = df['Nitrogen'] + df['Potassium']\n#     # df['Nitrogen_Phosphorous'] = df['Nitrogen'] / (df['Phosphorous'] + 1e-5)\n#     # df['Sum_Nitrogen_Phosphorous'] = df['Nitrogen'] + df['Phosphorous']\n#     # df['Potassium_Phosphorous'] = df['Potassium'] / (df['Phosphorous'] + 1e-5)\n#     # df['Sum_Potassium_Phosphorous'] = df['Potassium'] + df['Phosphorous']\n#     # df['Total_Nutrients'] = df['Nitrogen'] + df['Potassium'] + df['Phosphorous']\n#     df['Soil_Crop'] = df['Soil Type'] + \"_\" + df['Crop Type']\n#     # df['Temp_Humidity'] = df['Temparature'] * df['Humidity']    \n#     # df['Potassium_Phosphorous'] = df['Potassium'] / (df['Phosphorous'] + 1e-5)\n#     return df\n\n# train_df = add_features(train_df)\n# test_df = add_features(test_df)\n\n# Variable defination\nid_column = 'id'\ntarget_column = 'Fertilizer Name'\nnumeric_features = [col for col in train_df.select_dtypes(include=['int64', 'float64']).columns \n                   if col != target_column and col != id_column]\ncategorical_features = [col for col in train_df.select_dtypes(include=['object']).columns \n                       if col != target_column and col != id_column]\n\n# Check for missing values\nprint(\"Missing values in train_df:\\n\", train_df.isnull().sum())\nprint(\"Missing values in test_df:\\n\", test_df.isnull().sum())\n\n# Synchronize column structure between train_df and test_df\nall_columns = numeric_features + categorical_features + [target_column] \nfor col in all_columns:\n    if col not in test_df.columns:\n        test_df[col] = np.nan\n\n# Rearrange the column order for test_df to match train_df\ntest_df = test_df[all_columns]\n\n# Split the target before transforming (only for train_df)\nX = train_df.drop(target_column, axis=1)  # Đặc trưng\ny = train_df[target_column]  # Nhãn\n\n# Preprocessor definition (chỉ áp dụng cho numeric_features)\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', PowerTransformer(method='yeo-johnson'), numeric_features)\n    ],\n    remainder='passthrough'  # Giữ nguyên các cột categorical\n)\n\n# Pipeline definition\npipeline = Pipeline(steps=[('preprocessor', preprocessor)])\n\n# Fit và transform đồng thời cho train và test\nX_transformed = pipeline.fit_transform(X)\ntest_df_transformed = pipeline.transform(test_df.drop(target_column, axis=1))  # Loại bỏ target khỏi test_df\n\n# Chuyển đổi mảng NumPy về DataFrame để dễ quản lý\nfeature_names = numeric_features + categorical_features\nX_transformed_df = pd.DataFrame(X_transformed, columns=feature_names)\ntest_df_transformed_df = pd.DataFrame(test_df_transformed, columns=feature_names)\n\n# Encode Target column\nle_target = LabelEncoder()\ny_encoded = le_target.fit_transform(y)\nlabel_encoders = {target_column: le_target}\n\n# Tách đặc trưng và mục tiêu\nX = X_transformed_df\ny = y_encoded\n\n# Chia tập train thành train và validation\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Check size\nprint(f\"Columns of train: {X.columns.tolist()}\")\nprint(f\"Size of train: {X.shape}\")\nprint(f\"Size of test: {test_df_transformed_df.shape}\")\nprint(f\"Size of train for training: {X_train.shape}\")\nprint(f\"Size of validation for training: {X_val.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-09T10:11:59.950485Z","iopub.execute_input":"2025-06-09T10:11:59.95118Z","iopub.status.idle":"2025-06-09T10:12:05.577195Z","shell.execute_reply.started":"2025-06-09T10:11:59.951157Z","shell.execute_reply":"2025-06-09T10:12:05.576391Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# CatBoots Training","metadata":{}},{"cell_type":"code","source":"# Hàm tính MAP@3\ndef map_at_3(y_true, y_pred_prob, k=3):\n    map_scores = []\n    for true_label, pred_prob in zip(y_true, y_pred_prob):\n        top_k_indices = np.argsort(pred_prob)[::-1][:k]\n        true_label_binary = np.zeros(len(pred_prob))\n        true_label_binary[true_label] = 1\n        relevant = [1 if idx == true_label else 0 for idx in top_k_indices]\n        precisions = []\n        num_relevant = 0\n        for i, rel in enumerate(relevant):\n            if rel == 1:\n                num_relevant += 1\n                precisions.append(num_relevant / (i + 1))\n        map_scores.append(np.mean(precisions) if precisions else 0)\n    return np.mean(map_scores)\n\n# Thiết lập KFold\n#kf = KFold(n_splits=5, shuffle=True, random_state=42)\nkf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n# Danh sách lưu trữ\ntrain_map3_scores = []\nval_map3_scores = []\nmodels = []\n\n# Định nghĩa biến hạng mục (CatBoost sẽ xử lý trực tiếp)\ncat_features = [X.columns.get_loc(col) for col in categorical_features]  # Chuyển tên cột thành chỉ số\n\n# Lưu mô hình tốt nhất\nbest_model = None\nbest_val_map3 = 0.0\n\n# Huấn luyện với KFold\nfold = 1\nfor train_idx, val_idx in kf.split(X, y):\n    print(f\"\\nFold {fold}\")\n    \n    # Sử dụng .iloc để index theo hàng\n    X_train_fold = X.iloc[train_idx]\n    X_val_fold = X.iloc[val_idx]\n    y_train_fold = y[train_idx]  # y là mảng NumPy, dùng indexing trực tiếp\n    y_val_fold = y[val_idx]\n    \n    # Tạo Pool cho CatBoost\n    train_pool = Pool(X_train_fold, y_train_fold, cat_features=cat_features)\n    val_pool = Pool(X_val_fold, y_val_fold, cat_features=cat_features)\n    \n    # Khởi tạo CatBoost với tham số ban đầu\n    model = CatBoostClassifier(\n        iterations=20000,\n        depth=5,\n        learning_rate=0.01,\n        l2_leaf_reg=8,\n        random_seed=42,\n        cat_features=cat_features,\n        task_type='GPU',\n        early_stopping_rounds=400,\n        verbose=200\n    )\n    \n    # Huấn luyện\n    model.fit(train_pool, eval_set=val_pool)\n    \n    # Dự đoán\n    train_pred_prob = model.predict_proba(X_train_fold)\n    val_pred_prob = model.predict_proba(X_val_fold)\n    \n    # Tính MAP@3\n    train_map3 = map_at_3(y_train_fold, train_pred_prob)\n    val_map3 = map_at_3(y_val_fold, val_pred_prob)\n    \n    train_map3_scores.append(train_map3)\n    val_map3_scores.append(val_map3)\n    \n    print(f\"Fold {fold} - Train MAP@3: {train_map3:.4f}, Val MAP@3: {val_map3:.4f}\")\n    \n    if val_map3 > best_val_map3:\n        best_val_map3 = val_map3\n        best_model = model\n    \n    fold += 1\n\n# Tính trung bình MAP@3\nmean_train_map3 = np.mean(train_map3_scores)\nmean_val_map3 = np.mean(val_map3_scores)\nprint(f\"\\nMean Train MAP@3: {mean_train_map3:.4f}\")\nprint(f\"Mean Val MAP@3: {mean_val_map3:.4f}\")\n\nprint('CatBoost training was completed!')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-09T10:17:37.105642Z","iopub.execute_input":"2025-06-09T10:17:37.105913Z","iopub.status.idle":"2025-06-09T10:19:19.10969Z","shell.execute_reply.started":"2025-06-09T10:17:37.105892Z","shell.execute_reply":"2025-06-09T10:19:19.108805Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Prediction and Submission","metadata":{}},{"cell_type":"code","source":"from catboost import Pool\n\n# Tạo Pool cho test_df_transformed_df với cat_features\ncat_features_indices = [test_df_transformed_df.columns.get_loc(col) for col in categorical_features]\ntest_pool = Pool(\n    data=test_df_transformed_df,\n    cat_features=cat_features_indices\n)\n\n# Predicting probability on test set using best model\ntest_pred_prob = best_model.predict_proba(test_pool)  # Sử dụng predict_proba\n\n# Get the top 3 most probable labels for each sample\ntop_3_indices = np.argsort(test_pred_prob, axis=1)[:, -3:][:, ::-1]\n\n# Decode top 3 labels from number to original name (Fertilizer Name)\ntop_3_labels = []\nfor i in range(len(top_3_indices)):\n    labels = label_encoders[target_column].inverse_transform(top_3_indices[i])\n    # Kết hợp các nhãn thành một chuỗi, phân tách bằng dấu cách\n    top_3_labels.append(\" \".join(labels))\n\n# Tạo DataFrame submission\nsubmission_df = pd.DataFrame({\n    'id': test_ids,  # Sử dụng test_ids đã lưu trước đó\n    'Fertilizer Name': top_3_labels\n})\n\n# Lưu file submission\nsubmission_df.to_csv('submission.csv', index=False)\nprint(\"Submission file 'submission.csv' has been created!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-09T08:51:27.797012Z","iopub.execute_input":"2025-06-09T08:51:27.79727Z","iopub.status.idle":"2025-06-09T08:51:57.505449Z","shell.execute_reply.started":"2025-06-09T08:51:27.79725Z","shell.execute_reply":"2025-06-09T08:51:57.504745Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check submission\nprint(submission_df.head())\nprint(submission_df.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-09T08:53:54.805501Z","iopub.execute_input":"2025-06-09T08:53:54.806228Z","iopub.status.idle":"2025-06-09T08:53:54.811413Z","shell.execute_reply.started":"2025-06-09T08:53:54.806205Z","shell.execute_reply":"2025-06-09T08:53:54.81064Z"}},"outputs":[],"execution_count":null}]}